passwd:
  users:
  - name: core
    ssh_authorized_keys: 
    - |
      {{ lookup("file", lookup("env","PUBLIC_SSH_KEY_FILE")) | indent(6) }}
storage:
  files:
  {{ lookup('file','../../create-ignition/files/podman-policy.ign') | indent(2) }}
  - path: /etc/clone-signatures.sh
    mode: 0744
    filesystem: root
    contents:
      inline: |
        {{ lookup('file','clone-signatures.sh') | indent(8) }}                        
  - path: /opt/registry/auth/pull_secret.json
    mode: 0644
    filesystem: root
    contents:
      inline: |
        {{ lookup('file',workdir.registry_mirror~'/'~mirror.pull_secret_file) | indent(8) }}  
  - path: /opt/registry/auth/htpasswd
    mode: 0644
    filesystem: root
    contents:
      inline: |
        {{ lookup('file',workdir.registry_mirror~'/htpasswd') | indent(8) }}
  - path: /opt/registry/certs/domain.crt
    mode: 0644
    filesystem: root
    contents:
      inline: |
        {{ lookup('file',workdir.registry_mirror~'/'~cluster.compute.registry_mirror.name~'.'~install_config.baseDomain~'.crt') | indent(8) }} 
  - path: /opt/registry/certs/domain.key
    mode: 0644
    filesystem: root
    contents:
      inline: |
        {{ lookup('file',workdir.registry_mirror~'/'~cluster.compute.registry_mirror.name~'.'~install_config.baseDomain~'.key') | indent(8) }} 
  - path: /opt/services/httpd/conf/httpd.conf
    overwrite: true
    user:
      name: core
    contents:
      inline: |
        ServerName "{{ cluster.compute.registry_mirror.name~'.'~install_config.baseDomain }}"
        ServerRoot "/etc/httpd"
        Listen 8080
        Include conf.modules.d/*.conf
        User apache
        Group apache
        ServerAdmin root@localhost
        <Directory />
            AllowOverride none
            Require all denied
        </Directory>
        DocumentRoot "/var/www/html"
        <Directory "/var/www">
            AllowOverride None
            Require all granted
        </Directory>
        <Directory "/var/www/html">
            Options Indexes FollowSymLinks
            AllowOverride None
            Require all granted
        </Directory>
        <IfModule dir_module>
            DirectoryIndex index.html
        </IfModule>
        <Files ".ht*">
            Require all denied
        </Files>
        ErrorLog "logs/error_log"
        LogLevel warn
        <IfModule log_config_module>
            LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
            LogFormat "%h %l %u %t \"%r\" %>s %b" common
            <IfModule logio_module>
              LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O" combinedio
            </IfModule>
            CustomLog "logs/access_log" combined
        </IfModule>
        <IfModule alias_module>
            ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"
        </IfModule>
        <Directory "/var/www/cgi-bin">
            AllowOverride None
            Options None
            Require all granted
        </Directory>
        <IfModule mime_module>
            TypesConfig /etc/mime.types
            AddType application/x-compress .Z
            AddType application/x-gzip .gz .tgz
            AddType text/html .shtml
            AddOutputFilter INCLUDES .shtml
        </IfModule>
        AddDefaultCharset UTF-8
        <IfModule mime_magic_module>
            MIMEMagicFile conf/magic
        </IfModule>
        EnableSendfile on
        IncludeOptional conf.d/*.conf
    mode: 0644
    filesystem: root
  - path: /opt/services/httpd/www/html/index.html
    overwrite: true
    user:
      name: core
    group:
      name: core
    contents:
      inline: |
        Hello from FCOS!
    mode: 0644
    filesystem: root    
systemd:
  units:
    - name: registry-mirror.service
      enabled: true
      contents: |
        [Unit]
        Description=registry-mirror
        After=network-online.target
        Wants=crio.service

        [Service]
        TimeoutStartSec=0
        ExecStartPre=-/bin/podman kill mirror-registry
        ExecStartPre=-/bin/podman rm mirror-registry
        ExecStartPre=/bin/podman pull docker.io/library/registry:2
        #ExecStartPre=mkdir -p /opt/registry/certs
        #ExecStartPre=/bin/bash -c 'test -s /opt/registry/certs/domain.key && test -s /opt/registry/certs/domain.key || /bin/openssl req -newkey rsa:4096 -nodes -sha256 -keyout /opt/registry/certs/domain.key -x509 -days 365 -out /opt/registry/certs/domain.crt -subj "/C=SE/ST=Stockholm/L=Stockholm/O=Red Hat/OU=Consulting/CN={{ cluster.compute.registry_mirror.name~'.'~install_config.baseDomain }}/emailAddress=admin@ocp.example.com.com"'
        ExecStartPre=mkdir -p /opt/registry/data
        #ExecStart=/bin/podman run --name mirror-registry -p 5000:5000 -v /opt/registry/data:/var/lib/registry:z -v /opt/registry/auth:/auth:z -e "REGISTRY_AUTH=htpasswd" -e "REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm" -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd -v /opt/registry/certs:/certs:z -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key -d docker.io/library/registry:2        
        ExecStart=/bin/podman run --name mirror-registry -p 5000:5000 -v /opt/registry/data:/var/lib/registry:z -v /opt/registry/certs:/certs:z -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key -d docker.io/library/registry:2        

        [Install]
        WantedBy=multi-user.target
    - name: mirror-job.service
      enabled: true
      contents: |
        [Unit]
        Description=mirror-job
        After=network-online.target
        Wants=crio.service

        [Service]
        RemainAfterExit=true
        TimeoutStartSec=0
        Restart=on-failure
        Environment=LOCAL_SECRET_JSON=/opt/registry/auth/pull_secret.json
        Environment=PRODUCT_REPO=openshift-release-dev
        Environment=RELEASE_NAME=ocp-release
        Environment=LOCAL_REGISTRY={{ cluster.compute.registry_mirror.name~'.'~install_config.baseDomain }}:5000
        Environment=LOCAL_REPOSITORY=ocp4/openshift4
        Environment=OCP_RELEASE={{ cluster.version }}-x86_64
        ExecStartPre=-/bin/podman kill mirror-job
        ExecStartPre=-/bin/podman rm mirror-job
        ExecStartPre=/bin/podman pull --authfile ${LOCAL_SECRET_JSON} quay.io/openshift/origin-cli
        ExecStartPre=/bin/bash -c '/bin/cp /opt/registry/certs/domain.crt /etc/pki/ca-trust/source/anchors/ && /bin/update-ca-trust'
        ExecStartPre=/bin/curl -v -s -u {{ mirror.username }}:{{ mirror.password }} https://{{ cluster.compute.registry_mirror.name~'.'~install_config.baseDomain }}:5000/v2/_catalog
        #ExecStartPre=/bin/bash -c "/bin/jq '.auths += {\"utility.ocp.example.com:5000\":{\"auth\":\"b2NwOm9jcA==\",\"email\":\"admin@ocp.example.com\"}}' /opt/services/registry/auth/pullsecret_rh.json | /bin/tee /opt/services/registry/auth/pullsecret.json"        
        #ExecStart=/bin/podman run --name mirror-job -v /opt/registry/auth:/opt/registry/auth:z quay.io/openshift/origin-cli /bin/oc adm -a ${LOCAL_SECRET_JSON} release mirror --from=quay.io/${PRODUCT_REPO}/${RELEASE_NAME}:${OCP_RELEASE} --to=${LOCAL_REGISTRY}/${LOCAL_REPOSITORY} --to-release-image=${LOCAL_REGISTRY}/${LOCAL_REPOSITORY}:${OCP_RELEASE}
        ExecStart=/bin/oc adm -a ${LOCAL_SECRET_JSON} release mirror --from=quay.io/${PRODUCT_REPO}/${RELEASE_NAME}:${OCP_RELEASE} --to=${LOCAL_REGISTRY}/${LOCAL_REPOSITORY} --to-release-image=${LOCAL_REGISTRY}/${LOCAL_REPOSITORY}:${OCP_RELEASE}       
        
        [Install]
        WantedBy=multi-user.target 
    - name: httpd-container.service
      enabled: true
      contents: |
        [Unit]
        Description=HTTPD-container
        After=network-online.target
        Wants=network-online.target
        [Service]
        TimeoutStartSec=0
        ExecStartPre=-/bin/podman kill httpd-service
        ExecStartPre=-/bin/podman rm httpd-service
        ExecStartPre=/bin/podman pull --authfile /opt/registry/auth/pull_secret.json registry.redhat.io/rhel8/httpd-24
        ExecStartPre=/bin/chcon -R -t httpd_sys_content_t /opt/services/httpd
        ExecStart=/bin/podman run --authfile /opt/registry/auth/pull_secret.json --name httpd-service -v /opt/services/httpd/conf:/etc/httpd/conf:z -v /opt/services/httpd/www/html:/var/www/html/:z --net host registry.redhat.io/rhel8/httpd-24 /usr/sbin/httpd -DFOREGROUND -DNO_DETACH
        [Install]
        WantedBy=multi-user.target
    - name: signature-mirror-job.service
      enabled: true
      contents: |
        [Unit]
        Description=signature-mirror-job
        After=network-online.target
        Wants=network-online.target
        [Service]
        RemainAfterExit=true
        TimeoutStartSec=0
        Restart=on-failure
        Environment=release_image={{ cluster.release_image }}
        Environment=sigstore={{ mirror.sigstore }}
        Environment=sigdir=/opt/services/httpd/www/html
        ExecStart=/etc/clone-signatures.sh
        [Install]
        WantedBy=multi-user.target        
